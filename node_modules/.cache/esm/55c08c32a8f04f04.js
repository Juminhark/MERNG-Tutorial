let ApolloServer,express,session,connectRedis,typeDefs,resolvers,DB_URL,APP_PORT,IN_PROD,SESS_NAME,SESS_SECRET,SESS_LIFETIME,REDIS_HOST,REDIS_PORT,REDIS_PASSWORD,mongoose;_a8f‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_a8f‍.w("express",[["default",["express"],function(v){express=v}]]);_a8f‍.w("express-session",[["default",["session"],function(v){session=v}]]);_a8f‍.w("connect-redis",[["default",["connectRedis"],function(v){connectRedis=v}]]);_a8f‍.w("./typeDefs",[["default",["typeDefs"],function(v){typeDefs=v}]]);_a8f‍.w("./resolvers",[["default",["resolvers"],function(v){resolvers=v}]]);_a8f‍.w("./config",[["DB_URL",["DB_URL"],function(v){DB_URL=v}],["APP_PORT",["APP_PORT"],function(v){APP_PORT=v}],["IN_PROD",["IN_PROD"],function(v){IN_PROD=v}],["SESS_NAME",["SESS_NAME"],function(v){SESS_NAME=v}],["SESS_SECRET",["SESS_SECRET"],function(v){SESS_SECRET=v}],["SESS_LIFETIME",["SESS_LIFETIME"],function(v){SESS_LIFETIME=v}],["REDIS_HOST",["REDIS_HOST"],function(v){REDIS_HOST=v}],["REDIS_PORT",["REDIS_PORT"],function(v){REDIS_PORT=v}],["REDIS_PASSWORD",["REDIS_PASSWORD"],function(v){REDIS_PASSWORD=v}]]);_a8f‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);













(async () => {
  try {
    await mongoose.connect(`${DB_URL}`, { useNewUrlParser: true })

    const app = express()

    app.disable('x-powered-by')

    const RedisStore = connectRedis(session)

    const store = new RedisStore({
      host: REDIS_HOST,
      port: REDIS_PORT,
      pass: REDIS_PASSWORD,
      logErrors: true
    })

    app.use(session({
      store,
      name: SESS_NAME,
      secret: SESS_SECRET,
      resave: false,
      saveUninitialized: false,
      cookie: {
        maxAge: SESS_LIFETIME,
        sameSite: true,
        secure: IN_PROD
      }
    }))

    const server = new ApolloServer({
      typeDefs,
      resolvers,
      playground: !IN_PROD,
      context: ({ req, res }) => ({ req, res })
    })

    server.applyMiddleware({ app })

    app.listen({ port: APP_PORT }, () =>
      console.log(`🚀 Server ready at http://localhost:${APP_PORT}${server.graphqlPath}`)
    )
  } catch (e) {
    _a8f‍.g.console.error(e)
  }
})()
