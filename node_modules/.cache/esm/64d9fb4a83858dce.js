let Joi,mongoose,UserInputError,SignUp,User;_838‍.x([["default",()=>_838‍.o]]);_838‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_838‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_838‍.w("apollo-server-express",[["UserInputError",["UserInputError"],function(v){UserInputError=v}]]);_838‍.w("../schemas",[["SignUp",["SignUp"],function(v){SignUp=v}]]);_838‍.w("../models",[["User",["User"],function(v){User=v}]]);





_838‍.d({
  Query: {
    users: (root, args, context, info) => {
      // TODO: auth, projection, pagination

      return User.find({})
    },
    user: (root, { id }, context, info) => {
      // TODO: auth, projection, sanitization

      if (!mongoose.Types.ObjectId.isValid(id)) {
        throw new UserInputError(`${id} in not vaild user ID`)
      }

      return User.findById(id)
    }
  },
  Mutation: {
    signUp: async (root, args, context, info) => {
      // TODO: not auth

      await Joi.vaildate(args, SignUp)

      return User.create(args)
    }
  }
});
