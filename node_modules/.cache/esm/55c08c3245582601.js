let ApolloServer,express,typeDefs,resolvers,APP_PORT,IN_PROD,DB_URL,mongoose;_455‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_455‍.w("express",[["default",["express"],function(v){express=v}]]);_455‍.w("./typeDefs",[["default",["typeDefs"],function(v){typeDefs=v}]]);_455‍.w("./resolvers",[["default",["resolvers"],function(v){resolvers=v}]]);_455‍.w("./config",[["APP_PORT",["APP_PORT"],function(v){APP_PORT=v}],["IN_PROD",["IN_PROD"],function(v){IN_PROD=v}],["DB_URL",["DB_URL"],function(v){DB_URL=v}]]);_455‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);






(async () => {
  try {
    await mongoose.connect(`${DB_URL}`, { useNewUrlParser: true })

    const app = express()

    app.disable('x-powered-by')

    const server = new ApolloServer({
      typeDefs,
      resolvers,
      playground: !IN_PROD
    })

    server.applyMiddleware({ app })

    app.listen({ port: APP_PORT }, () =>
      console.log(`🚀 Server ready at http://localhost:${APP_PORT}${server.graphqlPath}`)
    )
  } catch (e) {
    _455‍.g.console.error(e)
  }
})()
