let Joi,mongoose,UserInputError,signUp,signIn,User,Auth;_be8‍.x([["default",()=>_be8‍.o]]);_be8‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_be8‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_be8‍.w("apollo-server-express",[["UserInputError",["UserInputError"],function(v){UserInputError=v}]]);_be8‍.w("../schemas",[["signUp",["signUp"],function(v){signUp=v}],["signIn",["signIn"],function(v){signIn=v}]]);_be8‍.w("../models",[["User",["User"],function(v){User=v}]]);_be8‍.w("../auth",[["*",null,function(v){Auth=v}]]);






_be8‍.d({
  Query: {
    me: (root, args, { req }, info) => {
      // TODO: projection
      Auth.checkSignedIn(req)

      return User.findById(req.session.userId)
    },
    users: (root, args, { req }, info) => {
      // TODO: auth, projection, pagination

      Auth.checkSignedIn(req)

      return User.find({})
    },
    user: (root, { id }, { req }, info) => {
      // TODO: auth, projection, sanitization

      Auth.checkSignedIn(req)

      if (!mongoose.Types.ObjectId.isValid(id)) {
        throw new UserInputError(`${id} in not vaild user ID`)
      }

      return User.findById(id)
    }
  },
  Mutation: {
    signUp: async (root, args, { req }, info) => {
      // TODO: not auth

      Auth.checkSignedOut()

      await Joi.validate(args, signUp, { abortEarly: false })

      return User.create(args)
    },
    signIn: async (root, args, { req }, info) => {
      const { userId } = req.session

      if (userId) {
        return User.findById(userId)
      }

      await Joi.validate(args, signIn, { abortEarly: false })

      const user = Auth.attemptSignIn(args.email, args.password)

      req.session.userId = user.id

      return user
    },
    signOut: (root, args, { req, res }, info) => {
      Auth.checkSignedIn(req)

      return Auth.signOut()
    }
  }
});
